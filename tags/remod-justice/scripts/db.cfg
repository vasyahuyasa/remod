// Database functions for Remod
// Informal rule: all "local" variables should be started with "db__"
// How to use database?
//

/////////////////////////////////////
// Register database in remod
// @group db
// @arg1 database engine, "mysql" or "sqlite3"
// @arg2 connection string  (login:password@server:port/database_name  for mysql or path/to/file.db for sqlite)
// @arg3 name of database in remod ("default" for default database)
// @example db_register "sqlite" "base.db" "default"
db_register = [
	if (|| (&& (=s $arg1 "sqlite3") (identexists "sqlite3_open")) (&& (=s $arg1 "mysql") (identexists "mysql_open"))) [
		//checking available of egine specific functions.
		db__name = (getvalue (getalias "arg3") "default")
		
		alias (concatword "db__engine_" $db__name) $arg1
		alias (concatword "db__str_" $db__name) $arg2
		alias (concatword "db__dbuid_" $db__name "_0") "-1"
		
		echo (format "Registered database '%1' %2://%3" $db__name $arg1 $arg2)
	] [
		echo (format "DB ERROR: Database engine %1 was not compiled in server" $arg1)
	]
]

/////////////////////////////////////
// Get engine of registered database
// @group db
// @arg1 name of database (default value: "default")
// @return engine of registered database (currently: "mysql" or "sqlite")
// @example $engine = (db_get_engine "default")
db_get_engine = [
	result (getalias (concatword "db__engine_" (getvalue (getalias "arg1") "default")))
]

////////////////////////////////////
// Get connection string of registered database
// @group db
// @arg1 name of database (default value: "default")
// @return connection string
// @example $conn_str = (db_get_connstr "default")
db_get_connstr = [
	result (getalias (concatword "db__str_" (getvalue (getalias "arg1") "default")))
]


/////////////////////////////////////
// Get dbuid of database with specified connection number
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @return dbuid (internal remod's id of database connection)
// @example $dbuid = (db_get_dbuid "default" 0)
db_get_dbuid = [
	result (getalias (concatword "db__dbuid_" (getvalue (getalias "arg1") "default") "_" (getvalue (getalias "arg2") "0")))
]

/////////////////////////////////////
// Check if database connection (dbuid) with specified connection number is valid. 
// If no, prints error message.
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @return 1 if connection is valid otherwise 0
// @example if (db_check_dbuid "default" 0) [..do smth sith db..]
db_check_dbuid = [
	db__name = (getvalue (getalias "arg1") "default")
	db__conn_num = (getvalue (getalias "arg2") "0")
	db__uid = (getalias (concatword "db__dbuid_" $db__name "_" $db__conn_num))
	if (= $db__uid -1) [
		db_print_error $db__name "could not initialize connection"
		db__res = 0
	] [
		db__res = 1
	]
	result $db__res
]

/////////////////////////////////////
// Set database connection id (dbuid) with for database for specified connection number
// @group db
// @arg1 dbuid
// @arg2 database name (default value: "default")
// @arg3 connection number (default value: "0")
// @example db_set_dbuid $dbuid "default" 0 
db_set_dbuid = [
	alias (concatword "db__dbuid_" (getvalue (getalias "arg2") "default") "_" (getvalue (getalias "arg3") "0")) $arg1
]

/////////////////////////////////////
// Format and log error message for database
// @group db
// @arg1 message
// @arg2 database name (default value: "default")
// @example db_print_error "database was stolen by Cthulhu" "default"
db_print_error = [
	db__name = (getvalue (getalias "arg2") "default")
	echo  (format "DB ERROR in %2 database '%1': %3" $db__name (db_get_engine $db__name) $arg1))
]

/////////////////////////////////////
// Get database error message and print it with db_print_error
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @example db_error "default" 0 
db_error = [
	db__name = (getvalue (getalias "arg1") "default")
	db__conn_num = (getvalue (getalias "arg2") "0")
	db__uid = (db_get_dbuid $db__name $db__conn_num)
	
	db__error = 0
	cases (db_get_engine $db__name) "sqlite3" [
		db__error = (sqlite3_error $db__uid)
	] "mysql" [
		db__error = (mysql_error $db__uid)
	] () [
	]
	if $db__error [
		db_print_error $db__error $db__name
	]
]

/////////////////////////////////////
// Open connection for database
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @return database connection id (dbuid)
// @example db_open "default" 0
db_open = [
	db__name = (getvalue (getalias "arg1") "default")
	db__conn_num = (getvalue (getalias "arg2") "0")
	db__connection_str = (db_get_connstr $db__name)
	
	cases (db_get_engine $db__name) "sqlite3" [
		db__uid = (sqlite3_open $db__connection_str)
	] "mysql" [ 
		db__uid = (mysql_open $db__connection_str)
	] () [
		db__uid = -1
		echo (concatword "DB ERROR: unknown db engine " $db__name)
	]
	result $db__uid
]


/////////////////////////////////////
// Initialize database connection. Open connection if it has not been opened yet  
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @return database connection id (dbuid)
// @example db_open "default" 0
db_init = [
	db__name = (getvalue (getalias "arg1") "default")
	db__conn_num = (getvalue (getalias "arg2") "0")
	db__connection_str = (db_get_connstr $db__name)
	db__uid = (db_get_dbuid $db__name $db__conn_num)
	
	if (= $db__uid -1) [
		cases (db_get_engine $db__name) "sqlite3" [
			db_set_dbuid (sqlite3_open $db__connection_str) $db__name $db__conn_num
		] "mysql" [ 
			db_set_dbuid (mysql_open $db__connection_str) $db__name $db__conn_num
		] () [ 
			echo (concatword "db error: unknown db engine " $db__name)
		]
		if (db_check_dbuid $arg1 $arg2) [
			echo (format "Connected to database '%1' %2://%3" $db__name (db_get_engine $db__name) $db__connection_str)
		]
	]
]

/////////////////////////////////////
// Execute raw SQL query
// @group db
// @arg1 SQL query string
// @arg2 database name (default value: "default")
// @arg3 connection number (default value: "0")
// @return query result id
// @example db_query "select * from table where id=1 and name='123'" "default"  0
db_query = [
	db__name = (getvalue (getalias "arg2") "default")
	db__conn_num = (getvalue (getalias "arg3") "0")
	db__uid = (db_get_dbuid $db__name $db__conn_num)
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_query $db__uid $arg1)
	] "mysql" [
		db__res = (mysql_query $db__uid $arg1)
	] () [
		db__res = -1
	]
	result $db__res
]


/////////////////////////////////////
// Execute SQL query with escaping parameters
// @group db
// @arg1 SQL query string
// @arg2 list of parameters
// @arg3 database name (default value: "default")
// @arg4 connection number (default value: "0")
// @return query result id
// @example db_query "select * from table where id=:0 and name=':1'" "1123 supername" "default"  0
db_pquery = [
	db__name = (getvalue (getalias "arg3") "default")
	db__conn_num = (getvalue (getalias "arg4") "0")
	db__uid = (db_get_dbuid $db__name $db__conn_num)
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_pquery $db__uid $arg1 $arg2)
	] "mysql" [
		db__res = (mysql_pquery $db__uid $arg1 $arg2)
	] () [
		db__res = -1
	]
	result $db__res
]

/////////////////////////////////////
// Execute insert-or-replace query (depending on engine)  
// @group db
// @arg1 table name for query to execute
// @arg2 last SQL statement
// @arg3 list of parameters
// @arg4 database name (default value: "default")
// @arg5 connection number (default value: "0")
// @return query result id
// @example db_insert_replace "player" "(name) VALUES (':0')" "kool_player" "default" 0 # for MySQL transforms into "REPLACE INTO player (name) VALUES ('kool_player')"  
db_insert_replace = [
	db__name = (getvalue (getalias "arg4") "default")
	db__conn_num = (getvalue (getalias "arg5") "0")
	db__uid = (db_get_dbuid $db__name $db__conn_num)
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_pquery $db__uid (concatword "INSERT OR REPLACE INTO " $arg1 " " $arg2) $arg3)
	] "mysql" [
		db__res = (mysql_pquery $db__uid (concatword "REPLACE INTO " $arg1 " " $arg2) $arg3)
	] () [
		db__res = -1
	]
	result $db__res
]

/////////////////////////////////////
// Get next row from query result list 
// @group db
// @arg1 query result id
// @arg2 database name (default value: "default")
// @return list of vbalues in the row
// @example db_getrow $query_result_id "default" 
db_getrow = [
	db__name = (getvalue (getalias "arg2") "default")
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_getrow $arg1)
	] "mysql" [
		db__res = (mysql_getrow $arg1)
	] () [
		db__res = ""
	]
	result $db__res
]

/////////////////////////////////////
// Finalize query result, free its memory.
// Use it after query result is processed
// @group db
// @arg1 query result id
// @arg2 database name (default value: "default")
// @return 
// @example db_finalize $query_dbuid "default" 
db_finalize = [
	db__name = (getvalue (getalias "arg2") "default")
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_finalize $arg1)
	] "mysql" [		
		db__res = (mysql_finalize $arg1)
	] () [
		db__res = -1
	]
	result $db__res
]

/////////////////////////////////////
// Close database connection
// @group db
// @arg1 database name (default value: "default")
// @arg2 connection number (default value: "0")
// @return 
// @example db_close "default"  0
db_close = [

	db__name = (getvalue (getalias "arg1") "default")
	db__conn_num = (getvalue (getalias "arg1") "0")

	db__uid = (db_get_dbuid $db__name $db__conn_num)
	
	cases (db_get_engine $arg1) "sqlite3" [
		db__res = (sqlite3_close $db__uid)
	] "mysql" [
		db__res = (mysql_close $db__uid)
	] () [ // default
		db__res = -1
	]
	result $db__res
]
