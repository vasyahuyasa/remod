//simple commands are here

//usage_cmd_test = [result "test [cn] [int] (bool) (str)"]
//cmd_test = [
//	echo (concat "not_String_params:" $arg2) 
//	echo (concat "String_params:" $arg3)
//	pm $arg2 (format "(PM) %1(%2): %3 - %4 - %5 - %6 " (getname $arg1) $arg1 (at $arg2 0) (at $arg2 1) (at $arg2 2) $arg3 )
//	result -1 //set it when usage error
//	result -2 //set it when permission error
//]
//registercommand "test" cmd_test "ci|bs" 1 //4 parameters are passed to command #test. c - cn, i - integer, b - boolean, s - string (command "#test 0 0 0 remod forever" is  valid)
////parameters after | are not obligatory ("#test 0 0" also works). string parameter must be the last
// 1 - command allowed for all players, 2 - for admins, 3 -  for masters

usage_cmd_help = [ result "^help (command) ^f1Shows info about command or list of server commands"]
cmd_help = [
	if (=s $arg3 "") [
		res = ""
		loop i (listlen $commands) [
			res = (concatword $res " #" (at $commands $i))
		]
		pm $arg1 (format "^f1Server commands:^f0%1" $res) 
	] [
		pm $arg1 (usage (concatword "cmd_" $arg3))
	]
]
registercommand "help" cmd_help "|s" 1 //string parameter can be empty



usage_cmd_pm = [result "pm [cn] [message] ^f1Sends private message to user"]
cmd_pm = [
	pm $arg2 (format "^f1(PM) ^f7%1^f1(^f5%2^f1): ^f0%3" (getname $arg1) $arg1 $arg3)
]
registercommand "pm" cmd_pm "cs" 1 //parameters are passed to pm are cn and string, both of these params are obligatory


usage_cmd_persist = [result "persist [1|0] ^f1Persists teams"]
cmd_persist = [
	persist = $arg2
	say (concatword "^f1Persist commands is " (? $arg2 "enabled" "disabled" ))
]
registercommand "persist" cmd_persist "b" 2



usage_cmd_specall = [result "specall [1|0] ^f1Spectate or unspectate all players"]
cmd_specall = [
	all = (allplayers)
	looplist cn $all [	
		spectator $arg2 $cn
	]
	say (concatword "^f1All players were " (? $arg2 "spectated" "unspectated" ))
]
registercommand "specall" cmd_specall "b" 2



usage_cmd_restart = [result "restart ^f1Restart current game"]
cmd_restart = [
	(map (getmap))
	say ("^f1Game was restarted")
]
registercommand "restart" cmd_restart "" 2



usage_cmd_getip = [result "getip ^f1Show player's ip"]
cmd_getip = [
	say (format ("^f1Ip of ^f7%1^f1(%2): ^f5%3") (getname $arg1) $arg1 (getip $arg1))
]
registercommand "getip" cmd_getip "i" 2



usage_cmd_version = [result "version ^f1Server's version"]
cmd_version = [
	say (format "^f1Server's version: ^f7%1" (version))
]
registercommand "version" cmd_version "" 1
