//main function for validation commands params
irc_validate_params = [ 
	//returns integer (start position in params of 's' string  argument) or -1 if validation failed
	//$arg1 is validation string. it may contain symbols 'c' (argument is cn), 'i' (integer), 'b' (boolean), 's' (string) and symbol |  (all parameters after '|' are not obligatorisch)
	//$arg2 contains params string proper
	oblig_params = 1

	res = 1
	curr_space_pos = 0
	res_space_pos = 0
	i = 0
	contain_s = (!= (strstr $arg1 "s") -1)
	while [(&& (!=s $arg1 "") (= $res 1))] [
		char = (substr $arg1 0 1)
		arg1 = (substr $arg1 1)

		if (=s $char "|") [
			oblig_params = 0
		] [
			param = ""
			res_space_pos = (+ $curr_space_pos $res_space_pos)
			if (=s $char "s") [
				param = $arg2
			] [
				curr_space_pos = (strstr $arg2 " ")

				if (!= $curr_space_pos -1) [  //extracting param from string
					param = (substr $arg2 0 $curr_space_pos)
					arg2 = (substr $arg2 (+ $curr_space_pos 1) )
				] [
					param = $arg2
					arg2 = ""
					//if (= $i 0) [ res_space_pos = -2 ]
					res_space_pos = -2
				]
				curr_space_pos =  (+ $curr_space_pos 1)
			]
			if (=s $param "") [
				res_space_pos = -2
				if (= $oblig_params 1) [
					res = 0
				] [
					res = 1
				]
			]  [
				validate_command = (concatword "validate_" $char)
				res = ($validate_command $param)
			]
			i = (+ $i 1)
		]
	]

	if (= $res 1) [result $res_space_pos] [result -1] 
]

//shows "usage" for irc command
irc_usage = [ 
	usage_cmd_func = (concatword "usage_" $arg1)
	result (concatword "^Usage: " ($usage_cmd_func))
]

//-------- COMMANDS HANDLER --------//

irc_commands = ""; //list of handled commands
irc_command_funcs = ""; //list of functions corresponding commands
irc_command_validation = ""; //list of validation rules for command params (combination of c - cn, s - string, i - int, b - bool; string may be only at last position)
irc_command_permissions = ""; //list of permissions per command. 0 - everyone, 1 - voice, 2 - op, 3 - special

irc_command_handler = [
	//$arg1 - user
	//$arg2 - command string
	space_pos = (strstr $arg2 " ") //earching for space in command string

	cmd = $arg2 //we use whole $arg2 as command name if command string contains no spaces
	params =  ""
	if (!= $space_pos -1) [ 
		cmd = (substr $arg2 0 $space_pos) //extracting command name from $arg2
		params = (substr $arg2 (+ $space_pos 1)) //and params for command
	];

	i = (indexof $irc_commands $cmd) //trying to find index of cmd in commands list

	if (= -1 $i) [ //there is no cmd in commands list
		ircsay (format "%1: command %2 not found" $arg1 $cmd)
	] [	
		//checking for permissions 
		perm_ok = 0
		irc_cmd_permission = (at $irc_command_permissions $i)
		if (= $irc_cmd_permission 0) [  //command can be used by all irc users
			perm_ok = 1
		] [
			perm_ok = (ircisop $arg1) // OP is always ok
			
			if (= $irc_cmd_permission 1) [ // for voice
				perm_ok = (ircisvoice $arg1)
			]				
			if (= $irc_cmd_permission 3) [ // special perm
				perm_ok = 0 // TODO special permissions
			]
		]
		
		if (!= $perm_ok 1) [
			ircsay (format "%1: you have no enought permissions" $arg1)
		] [
	 		irc_cmd_func = (at $irc_command_funcs $i) //

			res_validation = (irc_validate_params (strreplace (at $irc_command_validation $i) "_" "") $params) //validating params...
			if (= $res_validation -1) [ //validation failed. Show "usage"
				ircsay (format "%1: usage error. %2" (irc_usage $irc_cmd_func)) 
			] [	
				if (= $res_validation -2) [ //No string parameter
					not_string_params = $params
					string_params = ""
					params1 = $params
					params2 = ""
				] [
					not_string_params = (substr $params 0 $res_validation)
					string_params = (substr $params $res_validation)
					params1 = $not_string_params
					params2 = $string_params  
					
					if (=s $not_string_params "") [
						params1 = $string_params
						params2 = ""						
					]
				]

				res_cmd = ($irc_cmd_func $arg1 $params1 $params2) //executing command. we pass not string params (cn, int, bool) as list and string separatly
				if (= $res_cmd -1) [ //command function returns -1 if failed
					ircsay (format "%1: usage error. %2" (irc_usage $irc_cmd_func))
				]

				if (= $res_cmd -2) [ //command function returns -2 if triggered permission error  
					ircsay (format "%1 You have no enought permissions" $arg1)
				]
			]
		]
	]
]
//handling oncommand event
addhandler irc_oncommand irc_command_handler

//registers handler function $arg2 for command $arg1 
irc_registercommand = [
	irc_commands = (concat $irc_commands $arg1)
	irc_command_funcs = (concat $irc_command_funcs $arg2)
	irc_command_validation = (concat $irc_command_validation (? (=s $arg3 "") "_" $arg3))
	irc_command_permissions = (concat $irc_command_permissions $arg4)

]

