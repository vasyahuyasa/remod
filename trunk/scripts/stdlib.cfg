//  HERE IS COMMON FUNCTIONS AND VARIABLES

//-------- CONSTANTS --------//

//IRC colors
ircgreen    = [ result (concatword "g" $arg1) ] //green    
ircblue     = [ result (concatword "b" $arg1) ] //blue     
ircyellow   = [ result (concatword "y" $arg1) ] //yellow   
ircred      = [ result (concatword "r" $arg1) ] //red      
ircgrey     = [ result (concatword "a" $arg1) ] //grey     
ircmagenta  = [ result (concatword "m" $arg1) ] //magenta  
ircorange   = [ result (concatword "o" $arg1) ] //orange   
irccyan     = [ result (concatword "c" $arg1) ] //cyan     
ircviolet   = [ result (concatword "v" $arg1) ] //violet   
ircpurple   = [ result (concatword "p" $arg1) ] //purple   
ircbrown    = [ result (concatword "n" $arg1) ] //brown   
ircdgrey	= [ result (concatword "d" $arg1) ] //dark grey
ircreset	= [ result (concatword "u" $arg1) ] //reset to normal color

//Server colors
green 	= [ result (concatword "^f0" $arg1) ] // green: player talk
blue 	= [ result (concatword "^f1" $arg1) ] // blue: "echo" command
yellow 	= [ result (concatword "^f2" $arg1) ] // yellow: gameplay messages
red 	= [ result (concatword "^f3" $arg1) ] // red: important errors
gray 	= [ result (concatword "^f4" $arg1) ]
magenta	= [ result (concatword "^f5" $arg1) ]
orange	= [ result (concatword "^f6" $arg1) ]
white 	= [ result (concatword "^f7" $arg1) ]

//Server staff
MODENAMES = "ffa coop teamplay insta instateam effic efficteam tac tacteam capture regencapture ctf instactf protect instaprotect hold instahold efficctf efficprotect effichold"

TEAMMODES = "teamplay instateam efficteam tacteam capture regencapture ctf instactf efficctf protect instaprotect efficprotect hold instahold effichold"

FLAGMODES = "ctf instactf efficctf protect instaprotect efficprotect hold instahold effichold"

//-------- SOME USEFUL FUNCTIONS --------//

//////////////////
// Convert mode number to string. Uses $MODENAMES
// @arg1 mode number
// @group server
// @return mode name
// @example (modetostr 0) //returns ffa
modetostr = [
	result (at $MODENAMES $arg1)
]
//////////////////
// Checks if list contains specified item
// @group server
// @arg1 List
// @arg2 item to check
// @return 1 if list contains the item, otherwise 0
// @example isinlist "1 2 3" "3" //returns 1
isinlist = [ 
	result (!= (indexof $arg1 $arg2) -1) 
]

//////////////////
// Returns list of client numbers of all connected players
// @group player
// @return list of cn
allplayers = [ 
	result (listclients) 
]

//////////////////
// Returns client numbers of all active players (not spectators)
// @group player
// @return list of players' cn
allactiveplayers = [
	all = (listclients)
	res = ""
	looplist cn $all [
		if (&& (= (playerexists $cn) 1) (= (isspectator $cn) 0)) [
			res = (concat $res $cn)
		]
	]
	result $res
]

//////////////////
// Returns KpD (kills per deathes) of player
// @group player
// @arg1 cn of player
// @return float number
getkpd = [
	deathes = (getdeaths $arg1)
	frags = (getfrags $arg1)
	result (? $deathes (divf (div (* 10 $frags) $deathes) 10) (? $frags $frags 0))
]

//////////////////
// Returns formatted and colored "usage" string for specified command
// @group server
// @arg1 command name
// @return usage  string 
usage = [ 
	result (concatword "^f1Usage: ^f0" $commandchar (commandhelp $arg1))
]

//////////////////
// Prints specified string to output (log) with timestamp
// @group server
// @arg1 string
// @return [timestamp] string  
log = [
	echo (format "[%1] %2" (systimef "%d %b %X") $arg1)
]

//////////////////
// Execute all .cfg files in directory
// @group server
// @arg1 directory
execdir = [
	initvar skipfiles ""
	dir = $arg1
	i = 0
	loopfiles f $dir cfg [
		canload = 1
		looplist sf $skipfiles [
			if (=s $sf (format "%1.cfg" $f)) [ canload = 0 ]
		]
		
		if $canload [
			file = (format "%1/%2.cfg" $dir $f) 
			//log (format "executing '%1'" $file)
			i = (+ $i 1)
			exec $file
		]
 	]
	log (format "executed %1 files in '%2'" $i $dir)		
]

//////////////////
// Convert milliseconds to time string
// @group server
// @arg1 milliseconds
// @return %d days %h hours %m minutes
millistostr = [
	res = ""
	if (>= (div $arg1 86400000) 1) [
		res = (formatmillis "%d days %h hours %m minutes" $arg1)
	] [
		if (>= (div $arg1 3600000) 1) [
			res = (formatmillis "%h hours %m minutes" $arg1)
		] [
			if (>= (div $arg1 60000) 1) [
				res = (formatmillis "%m minutes" $arg1)	
			]
		]
	]

	if ($arg2) [
		res = (concat $res (formatmillis "%s.%i seconds" $arg1))
	]	
	result $res
]

//////////////////
// Execute $arg2 if $arg1 not defined
// @arg1 test value
// @arg2 function to execute
// @group server
// @example ifndef a [ echo "$a not defined" ]
ifndef = [ 
	if (! (identexists $arg1)) [ @arg2 ] 
]

//////////////////
// Return value of variable $arg1 if it's initialized, otherwise returns default value $arg2
// @group server
// @arg1 variable name
// @arg2 default value
// @example getvalue "arg1" "default"
getvalue = [
	if (identexists $arg1) [
		result $arg1
	] [
		result $arg2
	]
]

//////////////////
// Initialize vaiable $arg1 with default value $arg2 if it's not initialized yet
// @group server
// @arg1 vaiable
// @arg2 default value
// @example defaultvalue "var_name" "value" // if there is no $var_name before this call, does $var_name = "value" 
defaultvalue = [
	if (! (identexists $arg1)) [
		alias $arg1 $arg2
	] 
]

//////////////////
// Return absolute value of $arg1
// @group server
// @arg1 vaiable
abs = [ 
	max (- 0 $arg1) $arg1 
]
