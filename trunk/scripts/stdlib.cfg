//  HERE IS COMMON FUNCTIONS AND VARIABLES


//-------- CONSTANTS --------//

//IRC colors
ircgreen    = [ result (concatword "g" $arg1) ] //green    
ircblue     = [ result (concatword "b" $arg1) ] //blue     
ircyellow   = [ result (concatword "y" $arg1) ] //yellow   
ircred      = [ result (concatword "r" $arg1) ] //red      
ircgrey     = [ result (concatword "a" $arg1) ] //grey     
ircmagenta  = [ result (concatword "m" $arg1) ] //magenta  
ircorange   = [ result (concatword "o" $arg1) ] //orange   
irccyan     = [ result (concatword "c" $arg1) ] //cyan     
ircviolet   = [ result (concatword "v" $arg1) ] //violet   
ircpurple   = [ result (concatword "p" $arg1) ] //purple   
ircbrown    = [ result (concatword "n" $arg1) ] //brown   
ircdgrey	= [ result (concatword "d" $arg1) ] //dark grey
ircreset	= [ result (concatword "u" $arg1) ] //reset to normal color

//Server colors
green 	= [ result (concatword "^f0" $arg1 "^f7") ] // green: player talk
blue 	= [ result (concatword "^f1" $arg1 "^f7") ] // blue: "echo" command
yellow 	= [ result (concatword "^f2" $arg1 "^f7") ] // yellow: gameplay messages
red 	= [ result (concatword "^f3" $arg1 "^f7") ] // red: important errors
gray 	= [ result (concatword "^f4" $arg1 "^f7") ]
magenta	= [ result (concatword "^f5" $arg1 "^f7") ]
orange	= [ result (concatword "^f6" $arg1 "^f7") ]
white 	= [ result (concatword "^f7" $arg1) ]

//Server staff
MODENAMES = "ffa coop-edit teamplay instagib instagib_team efficiency efficiency_team tactics tactics_team capture regen_capture ctf insta_ctf protect insta_protect hold insta_hold efficiency_ctf  efficiency_protect  efficiency_hold"

TEAMMODES = "teamplay instagib_team efficiency_team tactics_team capture regen_capture ctf insta_ctf efficiency_ctf protect insta_protect efficiency_protect hold insta_hold efficiency_hold"

FLAGMODES = "ctf insta_ctf efficiency_ctf protect insta_protect efficiency_protect hold insta_hold efficiency_hold"

//Command char
CMDCHR = "#"


//-------- SOME USEFUL FUNCTIONS --------//

//Convert mode number to string
modetostr = [
	result (at $MODENAMES $arg1)
]

//checks list $arg1 containing value $arg2
isinlist = [ 
	res = 0
	loop i (listlen $arg1) [
		if (=s $arg2 (at $arg1 $i)) [res = 1]
	]
	result $res
]                 

//returns all cn of players
allplayers = [
	res = ""
	loop cn $maxclients [
		if (= (playerexists $cn) 1) [
			res = (concat $res $cn)
		]
	]

	result $res
]

//translate time in seconds to format hh:mm:ss 
secondstotime = [
	seconds = (mod $arg1 60)
	res = $seconds
	arg1 = (div $arg1 60)
	if (!= $arg1 0) [
		if (< $seconds 10) [res = (concatword "0" $res) ]
		minutes = (mod $arg1 60);
		res = (concatword $minutes ":" $res)
		arg1 = (div $arg1 60)
		if (!= $arg1 0) [
			if (< $minutes 10) [res = (concatword "0" $res) ]
			res = (concatword $arg1 ":" $res)
		]
	] [
		$res = (concatword $res "s")
	]
	result $res
]

millistotime = [
	result (secondstotime (div $arg1 1000))
]

//returns KpD of player
getkpd = [
	deathes = (getdeaths $arg1)
	frags = (getfrags $arg1)
	result (? $deathes (divf (div (* 10 $frags) $deathes) 10) (? $frags $frags 0))
]

//replace element in list;  listreplace list index replace_el
listreplace = [
	rr = ""
	len = (listlen $arg1)
	loop i $len [
		rr = (concat $rr (? (= $i $arg2) $arg3 (at $arg1 $i)))
	]
	result $rr
]

//sorting list
sortlist = [
	res = $arg1
	len = (listlen $arg1)
	loop i $len [
		jlen = (- $len (+ $i 1))
		loop j $jlen [
			rj = (at $res $j)
			rj1 = (at $res (+ $j 1))
			if (> $rj $rj1) [
				res = (listreplace $res $j $rj1)
				res = (listreplace $res (+ $j 1) $rj)
			]
		]	
	]
	
	result $res
]

//sorts base list and replace elements with corresponding numbers in second list. returns second list
sorttwolists = [
	res = $arg1
	res2 = $arg2
	len = (listlen $arg1)
	loop i $len [
		jlen = (- $len (+ $i 1))
		loop j $jlen [
			rj = (at $res $j)
			rj1 = (at $res (+ $j 1))
			if (> $rj $rj1) [
				res = (listreplace $res $j $rj1)
				res = (listreplace $res (+ $j 1) $rj)
				
				tmp = (at $res2 $j)
				res2 = (listreplace $res2 $j (at $res2 (+ $j 1)))
				res2 = (listreplace $res2 (+ $j 1) $tmp)
			]
		]	
	]
	result $res2
]

// -------- VALIDATORS FOR COMMANDS ARGUMENTS --------  //
//validate boolean argument
validate_b = [ 
	result (? (|| (=s $arg1 "0") (= $arg1 "1")) 1 0 )
]

//validate string argument
validate_s = [ 
	result 1 //always true ]:->
]

//validate integer argument
validate_i = [ 
	result (? (|| (!= $arg1 0) (=s $arg1 "0")) 1 0 )
]

//validate client  number
validate_c = [ 
	result (? (&&  (= (validate_i $arg1) 1)  (playerexists $arg1)) 1 0)
]

//main function for validation commands params
validate_params = [ 
	//returns integer (start position in params of 's' string  argument) or -1 if validation failed
	//$arg1 is validation string. it may contain symbols 'c' (argument is cn), 'i' (integer), 'b' (boolean), 's' (string) and symbol |  (all parameters after '|' are not obligatorisch)
	//$arg2 contains params string proper
	oblig_params = 1

	res = 1
	curr_space_pos = 0
	res_space_pos = 0
	i = 0
	contain_s = (!= (strstr $arg1 "s") -1)
	while [(&& (!=s $arg1 "") (= $res 1))] [
		char = (substr $arg1 0 1)
		arg1 = (substr $arg1 1)

		if (=s $char "|") [
			oblig_params = 0
		] [
			param = ""
			res_space_pos = (+ $curr_space_pos $res_space_pos)
			if (=s $char "s") [
				param = $arg2
			] [
				curr_space_pos = (strstr $arg2 " ")

				if (!= $curr_space_pos -1) [  //extracting param from string
					param = (substr $arg2 0 $curr_space_pos)
					arg2 = (substr $arg2 (+ $curr_space_pos 1) )
				] [
					param = $arg2
					arg2 = ""
					//if (= $i 0) [ res_space_pos = -2 ]
					res_space_pos = -2
				]
				curr_space_pos =  (+ $curr_space_pos 1)
			]
			if (=s $param "") [
				res_space_pos = -2
				if (= $oblig_params 1) [
					res = 0
				] [
					res = 1
				]
			]  [
				validate_command = (concatword "validate_" $char)
				res = ($validate_command $param)
			]
			i = (+ $i 1)
		]
	]

	if (= $res 1) [result $res_space_pos] [result -1] 
]

//-------- COMMANDS HANDLER --------//

commands = ""; //list of handled commands
command_funcs = ""; //list of functions corresponding commands
command_validation = ""; //list of validation rules for command params (combination of c - cn, s - string, i - int, b - bool; string may be only at last position)
command_permissions = ""; //list of permissions per command. 1 - player, 2 - admin, 3 - master

//shows "usage" for  command
usage = [ 
	usage_cmd_func = (concatword "usage_" $arg1)
	result (concatword "^f1Usage: ^f0#" ($usage_cmd_func))
]


command_handler = [
	//$arg1 - user
	//$arg2 - command string
	space_pos = (strstr $arg2 " ") //earching for space in command string

	cmd = $arg2 //we use whole $arg2 as command name if command string contains no spaces
	params =  ""
	if (!= $space_pos -1) [ 
		cmd = (substr $arg2 0 $space_pos) //extracting command name from $arg2
		params = (substr $arg2 (+ $space_pos 1)) //and params for command
	];

	i = (indexof $commands $cmd) //trying to find index of cmd in commands list

	if (= -1 $i) [ //there is no cmd in commands list
		pm $arg1 (format "^f1Command ^f0%1%2 ^f1not found. Type ^f0%1help ^f1for commands list" $CMDCHR $cmd) //шлем нахер
	] [	
		//checking for permissions
		cmd_permission = (at $command_permissions $i)
		perm_ok = 0
		if (= $cmd_permission 1) [  //command can be used by all players
			perm_ok = 1
		] [
			if (= $cmd_permission 2) [ // for masters and admins
				perm_ok = (? (ismaster $arg1) 1 0)
			] [ // for admins only	
				perm_ok = (?  (isadmin $arg1) 1 0)
			]
		]
		
		if (!= $perm_ok 1) [
			pm $arg1 "^f3You have no enought permissions."
		] [
	 		cmd_func = (at $command_funcs $i) //

			res_validation = (validate_params (strreplace (at $command_validation $i) "_" "") $params) //validating params...
			if (= $res_validation -1) [ //validation failed. Show "usage"
				pm $arg1 (concatword "^f3Usage error. " (usage $cmd_func))
			] [	
				if (= $res_validation -2) [ //No string parameter
					not_string_params = $params
					string_params = ""
				] [
					not_string_params = (substr $params 0 $res_validation)
					string_params = (substr $params $res_validation)
				]

				res_cmd = ($cmd_func $arg1 $not_string_params $string_params) //executing command. we pass not string params (cn, int, bool) as list and string separatly
				if (= $res_cmd -1) [ //command function returns -1 if failed
					pm $arg1 (concatword "^f3Usage error. " (usage $cmd_func))
				]

				if (= $res_cmd -2) [ //command function returns -2 if triggered permission error  
					pm $arg1 "^f3You have no enought permissions.")
				]
			]
		]
	]
]
//handling oncommand event
addhandler oncommand command_handler

//registers handler function $arg2 for command $arg1 
registercommand = [
	commands = (concat $commands $arg1)
	command_funcs = (concat $command_funcs $arg2)
	command_validation = (concat $command_validation (? (=s $arg3 "") "_" $arg3))
	command_permissions = (concat $command_permissions $arg4)

]


